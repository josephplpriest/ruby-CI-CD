name: ruby-app-CICD

on:
  push:

    branches:
      - main
      - develop

    inputs:
      path_to_dockerfile: 
        description: path to dockerfile in repo
        default: './Dockerfile'
        type: string
      image_tag:
        description: tag to give image
        type: string
        default: 'ruby-app'
      docker_build_dir:
        description: path to run docker build
        type: string
        default: 'app/'
      lifecycle_policy_file:
        description: ecr repository lifecyle policy
        default: 'policy.json'
        type: string
      github_iam_role:
        description: github actions role to assume
        default: 'GitHubAction-AssumeRoleWithAction'
        type: string
      backend_iam_role:
        description: role for backend (s3, dynamodb, ecr) access
        default: 'tf-backend-access-role'
        type: string
      backend_s3_bucket:
        description: s3 bucket to store state file in
        default: 'ruby-ci-cd-281280216542'
        type: string
      aws_account_id:
        description: aws account id
        default: '281280216542'
        type:  string
      aws_region:
        description: region to create/manage resources in
        default: us-east-1
        type: string
      backend_dynamodb_table:
        description: table to store tf lock state
        default: 'terraform-state-lock-db'
        type: string

concurrency: ci-${{ github.repository }}-docker-pipeline

jobs:
  
  ruby-app-setup:
  
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./app
    
    steps:
       
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
      
      - run: bundle install

      - run: bundle exec rubocop

      - run: bundle exec bundle-audit update

      - run: bundle exec bundle-audit

  build-scan:
    
    needs: ruby-app-setup
    
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build an image from Dockerfile
        run: docker build -t "${{ inputs.image_tag }}:${{ github.sha }}" -f "${{ inputs.path_to_dockerfile }}" "${{ inputs.docker_build_dir }}/"
        env:
          IMAGE_TAG: ${{ inputs.image_tag }}
          PATH_TO_DOCKERFILE: ${{ inputs.path_to_dockerfile }}
          DOCKER_BUILD_DIR: ${{ inputs.docker_build_dir }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{ inputs.image_tag }}:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  docker:
    
    needs: build-scan

    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    outputs:
      full_image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}

    env:
      MY_BRANCH_VAR: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Get short commit hash
        id: get_commit_hash
        run: echo "COMMIT_HASH=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.github_iam_role }}
          aws-region: ${{ inputs.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: prepare ECR repo name based on the Github repository
        shell: bash
        run: |
          set -eux
          # lowercase the name
          repo="${GITHUB_REPOSITORY,,}"

          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV

      - name: TF init
        shell: bash
        run: |
          set -eux
          terraform init -upgrade -reconfigure \
            -backend-config='skip_metadata_api_check=true' \
            -backend-config='skip_region_validation=true' \
            -backend-config='skip_credentials_validation=true' \
            -backend-config='region=${{ inputs.aws_region }}' \
            -backend-config='bucket=${{ inputs.backend_s3_bucket }}' \
            -backend-config='key=docker-ecr/terraform-${{ env.ECR_REPO_NAME }}.tfstate' \
            -backend-config='dynamodb_table=${{ inputs.backend_dynamodb_table }}' \
            -backend-config='assume_role={"role_arn":"arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.backend_iam_role }}"}'

        working-directory: ${{ github.action_path }}

      - name: Create ECR repo [TF apply]
        shell: bash
        run: |
          set -eux
          terraform apply \
            -var 'repository_name=${{ env.ECR_REPO_NAME }}' \
            -var 'lifecycle_policy=${{ inputs.lifecycle_policy_file }}' \
            -var 'iam_role=arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.backend_iam_role }}' \
            -var 'aws_account_id=${{ inputs.aws_account_id }}' \
            -auto-approve
        working-directory: ${{ github.action_path }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ inputs.aws_account_id }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ inputs.image_tag }}
        run: |
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$FULL_IMAGE_TAG_$MY_BRANCH_VAR_$COMMIT_HASH" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$FULL_IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$FULL_IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

