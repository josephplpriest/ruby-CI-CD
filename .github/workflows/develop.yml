name: ruby-app-CICD

on:
  push:
    branches:
      - main
      - develop

env:
  PATH_TO_DOCKERFILE: './Dockerfile'
  IMAGE_TAG: 'ruby-app'
  DOCKER_BUILD_DIR: 'app/'
  LIFECYCLE_POLICY_FILE: 'policy.json'
  GITHUB_IAM_ROLE: 'GitHubAction-AssumeRoleWithAction'
  BACKEND_IAM_ROLE: 'tf-backend-access-role'
  BACKEND_S3_BUCKET: 'ruby-ci-cd-281280216542'
  AWS_ACCOUNT_ID: '281280216542'
  AWS_REGION: 'us-east-1'
  BACKEND_DYNAMODB_TABLE: 'terraform-state-lock-db'

concurrency: ci-${{ github.repository }}-docker-pipeline

jobs:
  ruby-app-setup:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./app
    
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
      
      - run: bundle install

      - run: bundle exec rubocop

      - run: bundle exec bundle-audit update

      - run: bundle exec bundle-audit

  build-scan:
    needs: ruby-app-setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build an image from Dockerfile
        run: docker build -t "${{ env.IMAGE_TAG }}:${{ github.sha }}" -f "${{ env.PATH_TO_DOCKERFILE }}" "${{ env.DOCKER_BUILD_DIR }}/"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{ env.IMAGE_TAG }}:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  docker:
    needs: build-scan
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    outputs:
      full_image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}

    env:
      MY_BRANCH_VAR: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Get short commit hash
        id: get_commit_hash
        run: echo "COMMIT_HASH=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.GITHUB_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Prepare ECR repo name based on the Github repository
        shell: bash
        run: |
          set -eux
          repo="${GITHUB_REPOSITORY,,}"
          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV

      - name: TF init
        shell: bash
        run: |
          terraform init -upgrade -reconfigure \
            -backend-config='skip_metadata_api_check=true' \
            -backend-config='skip_region_validation=true' \
            -backend-config='skip_credentials_validation=true' \
            -backend-config='region=${{ env.AWS_REGION }}' \
            -backend-config='bucket=${{ env.BACKEND_S3_BUCKET }}' \
            -backend-config='key=docker-ecr/terraform-${{ env.ECR_REPO_NAME }}.tfstate' \
            -backend-config='dynamodb_table=${{ env.BACKEND_DYNAMODB_TABLE }}' \
            -backend-config='assume_role={"role_arn":"arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.BACKEND_IAM_ROLE }}"}'

      - name: Create ECR repo [TF apply]
        shell: bash
        run: |
          terraform apply \
            -var "repository_name=${{ env.ECR_REPO_NAME }}" \
            -var "lifecycle_policy=${{ env.LIFECYCLE_POLICY_FILE }}" \
            -var "iam_role=arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.BACKEND_IAM_ROLE }}" \
            -var "aws_account_id=${{ env.AWS_ACCOUNT_ID }}" \
            -auto-approve

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ env.AWS_ACCOUNT_ID }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$FULL_IMAGE_TAG_$MY_BRANCH_VAR_$COMMIT_HASH" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$FULL_IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$FULL_IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

